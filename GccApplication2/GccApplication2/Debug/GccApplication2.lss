
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000838  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000088c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e42  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000825  00000000  00000000  00001812  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007ac  00000000  00000000  00002037  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  000027e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000523  00000000  00000000  00002938  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000547  00000000  00000000  00002e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000033a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 1e 01 	call	0x23c	; 0x23c <main>
  64:	0c 94 1a 04 	jmp	0x834	; 0x834 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidSetPinDir>:
  6c:	81 11       	cpse	r24, r1
  6e:	1b c0       	rjmp	.+54     	; 0xa6 <DIO_voidSetPinDir+0x3a>
  70:	41 30       	cpi	r20, 0x01	; 1
  72:	59 f4       	brne	.+22     	; 0x8a <DIO_voidSetPinDir+0x1e>
  74:	2a b3       	in	r18, 0x1a	; 26
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	02 c0       	rjmp	.+4      	; 0x80 <DIO_voidSetPinDir+0x14>
  7c:	88 0f       	add	r24, r24
  7e:	99 1f       	adc	r25, r25
  80:	6a 95       	dec	r22
  82:	e2 f7       	brpl	.-8      	; 0x7c <DIO_voidSetPinDir+0x10>
  84:	82 2b       	or	r24, r18
  86:	8a bb       	out	0x1a, r24	; 26
  88:	08 95       	ret
  8a:	41 11       	cpse	r20, r1
  8c:	62 c0       	rjmp	.+196    	; 0x152 <DIO_voidSetPinDir+0xe6>
  8e:	2a b3       	in	r18, 0x1a	; 26
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	02 c0       	rjmp	.+4      	; 0x9a <DIO_voidSetPinDir+0x2e>
  96:	88 0f       	add	r24, r24
  98:	99 1f       	adc	r25, r25
  9a:	6a 95       	dec	r22
  9c:	e2 f7       	brpl	.-8      	; 0x96 <DIO_voidSetPinDir+0x2a>
  9e:	80 95       	com	r24
  a0:	82 23       	and	r24, r18
  a2:	8a bb       	out	0x1a, r24	; 26
  a4:	08 95       	ret
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	d9 f4       	brne	.+54     	; 0xe0 <DIO_voidSetPinDir+0x74>
  aa:	41 30       	cpi	r20, 0x01	; 1
  ac:	59 f4       	brne	.+22     	; 0xc4 <DIO_voidSetPinDir+0x58>
  ae:	27 b3       	in	r18, 0x17	; 23
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_voidSetPinDir+0x4e>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_voidSetPinDir+0x4a>
  be:	82 2b       	or	r24, r18
  c0:	87 bb       	out	0x17, r24	; 23
  c2:	08 95       	ret
  c4:	41 11       	cpse	r20, r1
  c6:	45 c0       	rjmp	.+138    	; 0x152 <DIO_voidSetPinDir+0xe6>
  c8:	27 b3       	in	r18, 0x17	; 23
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_voidSetPinDir+0x68>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_voidSetPinDir+0x64>
  d8:	80 95       	com	r24
  da:	82 23       	and	r24, r18
  dc:	87 bb       	out	0x17, r24	; 23
  de:	08 95       	ret
  e0:	82 30       	cpi	r24, 0x02	; 2
  e2:	d9 f4       	brne	.+54     	; 0x11a <DIO_voidSetPinDir+0xae>
  e4:	41 30       	cpi	r20, 0x01	; 1
  e6:	59 f4       	brne	.+22     	; 0xfe <DIO_voidSetPinDir+0x92>
  e8:	24 b3       	in	r18, 0x14	; 20
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_voidSetPinDir+0x88>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_voidSetPinDir+0x84>
  f8:	82 2b       	or	r24, r18
  fa:	84 bb       	out	0x14, r24	; 20
  fc:	08 95       	ret
  fe:	41 11       	cpse	r20, r1
 100:	28 c0       	rjmp	.+80     	; 0x152 <DIO_voidSetPinDir+0xe6>
 102:	24 b3       	in	r18, 0x14	; 20
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_voidSetPinDir+0xa2>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_voidSetPinDir+0x9e>
 112:	80 95       	com	r24
 114:	82 23       	and	r24, r18
 116:	84 bb       	out	0x14, r24	; 20
 118:	08 95       	ret
 11a:	83 30       	cpi	r24, 0x03	; 3
 11c:	d1 f4       	brne	.+52     	; 0x152 <DIO_voidSetPinDir+0xe6>
 11e:	41 30       	cpi	r20, 0x01	; 1
 120:	59 f4       	brne	.+22     	; 0x138 <DIO_voidSetPinDir+0xcc>
 122:	21 b3       	in	r18, 0x11	; 17
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_voidSetPinDir+0xc2>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_voidSetPinDir+0xbe>
 132:	82 2b       	or	r24, r18
 134:	81 bb       	out	0x11, r24	; 17
 136:	08 95       	ret
 138:	41 11       	cpse	r20, r1
 13a:	0b c0       	rjmp	.+22     	; 0x152 <DIO_voidSetPinDir+0xe6>
 13c:	21 b3       	in	r18, 0x11	; 17
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_voidSetPinDir+0xdc>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_voidSetPinDir+0xd8>
 14c:	80 95       	com	r24
 14e:	82 23       	and	r24, r18
 150:	81 bb       	out	0x11, r24	; 17
 152:	08 95       	ret

00000154 <DIO_voidSetPinValue>:
 154:	81 11       	cpse	r24, r1
 156:	1b c0       	rjmp	.+54     	; 0x18e <DIO_voidSetPinValue+0x3a>
 158:	41 30       	cpi	r20, 0x01	; 1
 15a:	59 f4       	brne	.+22     	; 0x172 <DIO_voidSetPinValue+0x1e>
 15c:	2b b3       	in	r18, 0x1b	; 27
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_voidSetPinValue+0x14>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_voidSetPinValue+0x10>
 16c:	82 2b       	or	r24, r18
 16e:	8b bb       	out	0x1b, r24	; 27
 170:	08 95       	ret
 172:	41 11       	cpse	r20, r1
 174:	62 c0       	rjmp	.+196    	; 0x23a <DIO_voidSetPinValue+0xe6>
 176:	2b b3       	in	r18, 0x1b	; 27
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_voidSetPinValue+0x2e>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_voidSetPinValue+0x2a>
 186:	80 95       	com	r24
 188:	82 23       	and	r24, r18
 18a:	8b bb       	out	0x1b, r24	; 27
 18c:	08 95       	ret
 18e:	81 30       	cpi	r24, 0x01	; 1
 190:	d9 f4       	brne	.+54     	; 0x1c8 <DIO_voidSetPinValue+0x74>
 192:	41 30       	cpi	r20, 0x01	; 1
 194:	59 f4       	brne	.+22     	; 0x1ac <DIO_voidSetPinValue+0x58>
 196:	28 b3       	in	r18, 0x18	; 24
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_voidSetPinValue+0x4e>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_voidSetPinValue+0x4a>
 1a6:	82 2b       	or	r24, r18
 1a8:	88 bb       	out	0x18, r24	; 24
 1aa:	08 95       	ret
 1ac:	41 11       	cpse	r20, r1
 1ae:	45 c0       	rjmp	.+138    	; 0x23a <DIO_voidSetPinValue+0xe6>
 1b0:	28 b3       	in	r18, 0x18	; 24
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_voidSetPinValue+0x68>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_voidSetPinValue+0x64>
 1c0:	80 95       	com	r24
 1c2:	82 23       	and	r24, r18
 1c4:	88 bb       	out	0x18, r24	; 24
 1c6:	08 95       	ret
 1c8:	82 30       	cpi	r24, 0x02	; 2
 1ca:	d9 f4       	brne	.+54     	; 0x202 <DIO_voidSetPinValue+0xae>
 1cc:	41 30       	cpi	r20, 0x01	; 1
 1ce:	59 f4       	brne	.+22     	; 0x1e6 <DIO_voidSetPinValue+0x92>
 1d0:	25 b3       	in	r18, 0x15	; 21
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_voidSetPinValue+0x88>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_voidSetPinValue+0x84>
 1e0:	82 2b       	or	r24, r18
 1e2:	85 bb       	out	0x15, r24	; 21
 1e4:	08 95       	ret
 1e6:	41 11       	cpse	r20, r1
 1e8:	28 c0       	rjmp	.+80     	; 0x23a <DIO_voidSetPinValue+0xe6>
 1ea:	25 b3       	in	r18, 0x15	; 21
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_voidSetPinValue+0xa2>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_voidSetPinValue+0x9e>
 1fa:	80 95       	com	r24
 1fc:	82 23       	and	r24, r18
 1fe:	85 bb       	out	0x15, r24	; 21
 200:	08 95       	ret
 202:	83 30       	cpi	r24, 0x03	; 3
 204:	d1 f4       	brne	.+52     	; 0x23a <DIO_voidSetPinValue+0xe6>
 206:	41 30       	cpi	r20, 0x01	; 1
 208:	59 f4       	brne	.+22     	; 0x220 <DIO_voidSetPinValue+0xcc>
 20a:	22 b3       	in	r18, 0x12	; 18
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_voidSetPinValue+0xc2>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_voidSetPinValue+0xbe>
 21a:	82 2b       	or	r24, r18
 21c:	82 bb       	out	0x12, r24	; 18
 21e:	08 95       	ret
 220:	41 11       	cpse	r20, r1
 222:	0b c0       	rjmp	.+22     	; 0x23a <DIO_voidSetPinValue+0xe6>
 224:	22 b3       	in	r18, 0x12	; 18
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_voidSetPinValue+0xdc>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_voidSetPinValue+0xd8>
 234:	80 95       	com	r24
 236:	82 23       	and	r24, r18
 238:	82 bb       	out	0x12, r24	; 18
 23a:	08 95       	ret

0000023c <main>:
#include "PWM_int.h"
#include "DIO_int.h"
#include "USART_H.h"
int main(void)
{
	DDRA|=0x0F;
 23c:	8a b3       	in	r24, 0x1a	; 26
 23e:	8f 60       	ori	r24, 0x0F	; 15
 240:	8a bb       	out	0x1a, r24	; 26
	PORTA&=0xF0;
 242:	8b b3       	in	r24, 0x1b	; 27
 244:	80 7f       	andi	r24, 0xF0	; 240
 246:	8b bb       	out	0x1b, r24	; 27
	DIO_voidSetPinDir(DIO_U8_PORTB, DIO_U8_PIN3, DIO_U8_OUTPUT);
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	63 e0       	ldi	r22, 0x03	; 3
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DIO_U8_PORTD, DIO_U8_PIN4, DIO_U8_OUTPUT);
 252:	41 e0       	ldi	r20, 0x01	; 1
 254:	64 e0       	ldi	r22, 0x04	; 4
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DIO_U8_PORTD, DIO_U8_PIN3, DIO_U8_OUTPUT);
 25c:	41 e0       	ldi	r20, 0x01	; 1
 25e:	63 e0       	ldi	r22, 0x03	; 3
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DIO_U8_PORTD, DIO_U8_PIN2, DIO_U8_OUTPUT);
 266:	41 e0       	ldi	r20, 0x01	; 1
 268:	62 e0       	ldi	r22, 0x02	; 2
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DIO_U8_PORTD, DIO_U8_PIN5, DIO_U8_OUTPUT);
 270:	41 e0       	ldi	r20, 0x01	; 1
 272:	65 e0       	ldi	r22, 0x05	; 5
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DIO_U8_PORTD, DIO_U8_PIN7, DIO_U8_OUTPUT);
 27a:	41 e0       	ldi	r20, 0x01	; 1
 27c:	67 e0       	ldi	r22, 0x07	; 7
 27e:	83 e0       	ldi	r24, 0x03	; 3
 280:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>
	DIO_voidSetPinValue(DIO_U8_PORTD, DIO_U8_PIN2, DIO_U8_LOW);
 284:	40 e0       	ldi	r20, 0x00	; 0
 286:	62 e0       	ldi	r22, 0x02	; 2
 288:	83 e0       	ldi	r24, 0x03	; 3
 28a:	0e 94 aa 00 	call	0x154	; 0x154 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_U8_PORTD, DIO_U8_PIN3, DIO_U8_HIGH);
 28e:	41 e0       	ldi	r20, 0x01	; 1
 290:	63 e0       	ldi	r22, 0x03	; 3
 292:	83 e0       	ldi	r24, 0x03	; 3
 294:	0e 94 aa 00 	call	0x154	; 0x154 <DIO_voidSetPinValue>
    PWM_vidInit();
 298:	0e 94 b8 01 	call	0x370	; 0x370 <PWM_vidInit>
	USART_Init(9600);
 29c:	60 e8       	ldi	r22, 0x80	; 128
 29e:	75 e2       	ldi	r23, 0x25	; 37
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <USART_Init>
	f32 curr = 2;
	u8 change_freq = 0.55;
	PWM_vidSetDutyNFreqCH0(curr);
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	90 e4       	ldi	r25, 0x40	; 64
 2b0:	0e 94 10 02 	call	0x420	; 0x420 <PWM_vidSetDutyNFreqCH0>
	PWM_vidSetDutyNFreqCH1A(curr);
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e4       	ldi	r25, 0x40	; 64
 2bc:	0e 94 22 02 	call	0x444	; 0x444 <PWM_vidSetDutyNFreqCH1A>
	PWM_vidSetDutyNFreqCH1B(curr);
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e4       	ldi	r25, 0x40	; 64
 2c8:	0e 94 38 02 	call	0x470	; 0x470 <PWM_vidSetDutyNFreqCH1B>
	PWM_vidSetDutyNFreqCH2(curr);
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	90 e4       	ldi	r25, 0x40	; 64
 2d4:	0e 94 4e 02 	call	0x49c	; 0x49c <PWM_vidSetDutyNFreqCH2>
    while (1) 
    {
		
		u8 rec=USART_RxChar();
 2d8:	0e 94 8e 02 	call	0x51c	; 0x51c <USART_RxChar>
		if ((rec=='U' && curr >= 14) ||( rec =='D' && curr <= 3)){
 2dc:	84 34       	cpi	r24, 0x44	; 68
 2de:	e1 f3       	breq	.-8      	; 0x2d8 <main+0x9c>
			continue;
		}
		else if(rec=='U'){
 2e0:	85 35       	cpi	r24, 0x55	; 85
 2e2:	11 f5       	brne	.+68     	; 0x328 <main+0xec>
			curr += change_freq;
			PWM_vidSetDutyNFreqCH0(curr);
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	90 e4       	ldi	r25, 0x40	; 64
 2ec:	0e 94 10 02 	call	0x420	; 0x420 <PWM_vidSetDutyNFreqCH0>
			PWM_vidSetDutyNFreqCH1A(curr);
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e4       	ldi	r25, 0x40	; 64
 2f8:	0e 94 22 02 	call	0x444	; 0x444 <PWM_vidSetDutyNFreqCH1A>
			PWM_vidSetDutyNFreqCH1B(curr);
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	90 e4       	ldi	r25, 0x40	; 64
 304:	0e 94 38 02 	call	0x470	; 0x470 <PWM_vidSetDutyNFreqCH1B>
			PWM_vidSetDutyNFreqCH2(curr);
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	70 e0       	ldi	r23, 0x00	; 0
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	90 e4       	ldi	r25, 0x40	; 64
 310:	0e 94 4e 02 	call	0x49c	; 0x49c <PWM_vidSetDutyNFreqCH2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 314:	2f ef       	ldi	r18, 0xFF	; 255
 316:	83 ed       	ldi	r24, 0xD3	; 211
 318:	90 e3       	ldi	r25, 0x30	; 48
 31a:	21 50       	subi	r18, 0x01	; 1
 31c:	80 40       	sbci	r24, 0x00	; 0
 31e:	90 40       	sbci	r25, 0x00	; 0
 320:	e1 f7       	brne	.-8      	; 0x31a <main+0xde>
 322:	00 c0       	rjmp	.+0      	; 0x324 <main+0xe8>
 324:	00 00       	nop
 326:	d8 cf       	rjmp	.-80     	; 0x2d8 <main+0x9c>
			
			_delay_ms(1000);
		}
		else if (rec =='D'){
 328:	84 34       	cpi	r24, 0x44	; 68
 32a:	b1 f6       	brne	.-84     	; 0x2d8 <main+0x9c>
			curr -= change_freq;
			PWM_vidSetDutyNFreqCH0(curr);
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	90 e4       	ldi	r25, 0x40	; 64
 334:	0e 94 10 02 	call	0x420	; 0x420 <PWM_vidSetDutyNFreqCH0>
			PWM_vidSetDutyNFreqCH1A(curr);
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	90 e4       	ldi	r25, 0x40	; 64
 340:	0e 94 22 02 	call	0x444	; 0x444 <PWM_vidSetDutyNFreqCH1A>
			PWM_vidSetDutyNFreqCH1B(curr);
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	70 e0       	ldi	r23, 0x00	; 0
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	90 e4       	ldi	r25, 0x40	; 64
 34c:	0e 94 38 02 	call	0x470	; 0x470 <PWM_vidSetDutyNFreqCH1B>
			PWM_vidSetDutyNFreqCH2(curr);
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e4       	ldi	r25, 0x40	; 64
 358:	0e 94 4e 02 	call	0x49c	; 0x49c <PWM_vidSetDutyNFreqCH2>
 35c:	2f ef       	ldi	r18, 0xFF	; 255
 35e:	83 ed       	ldi	r24, 0xD3	; 211
 360:	90 e3       	ldi	r25, 0x30	; 48
 362:	21 50       	subi	r18, 0x01	; 1
 364:	80 40       	sbci	r24, 0x00	; 0
 366:	90 40       	sbci	r25, 0x00	; 0
 368:	e1 f7       	brne	.-8      	; 0x362 <main+0x126>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <main+0x130>
 36c:	00 00       	nop
 36e:	b4 cf       	rjmp	.-152    	; 0x2d8 <main+0x9c>

00000370 <PWM_vidInit>:
#include "BIT_math.h"
#include "DIO_int.h"

void PWM_vidInit(void)
{
	CLEAR_BIT(TCCR0,7);
 370:	83 b7       	in	r24, 0x33	; 51
 372:	8f 77       	andi	r24, 0x7F	; 127
 374:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,6);
 376:	83 b7       	in	r24, 0x33	; 51
 378:	80 64       	ori	r24, 0x40	; 64
 37a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,3);
 37c:	83 b7       	in	r24, 0x33	; 51
 37e:	88 60       	ori	r24, 0x08	; 8
 380:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,4);
 382:	83 b7       	in	r24, 0x33	; 51
 384:	80 61       	ori	r24, 0x10	; 16
 386:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,5);
 388:	83 b7       	in	r24, 0x33	; 51
 38a:	80 62       	ori	r24, 0x20	; 32
 38c:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,0);
 38e:	83 b7       	in	r24, 0x33	; 51
 390:	81 60       	ori	r24, 0x01	; 1
 392:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,2);
 394:	83 b7       	in	r24, 0x33	; 51
 396:	84 60       	ori	r24, 0x04	; 4
 398:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,1);
 39a:	83 b7       	in	r24, 0x33	; 51
 39c:	8d 7f       	andi	r24, 0xFD	; 253
 39e:	83 bf       	out	0x33, r24	; 51
	
	// timer 1 channel A
	
	
	SET_BIT(TCCR1A,6);//6
 3a0:	8f b5       	in	r24, 0x2f	; 47
 3a2:	80 64       	ori	r24, 0x40	; 64
 3a4:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,7);//7
 3a6:	8f b5       	in	r24, 0x2f	; 47
 3a8:	80 68       	ori	r24, 0x80	; 128
 3aa:	8f bd       	out	0x2f, r24	; 47
	
	SET_BIT(TCCR1A,5);//5
 3ac:	8f b5       	in	r24, 0x2f	; 47
 3ae:	80 62       	ori	r24, 0x20	; 32
 3b0:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,4);//4
 3b2:	8f b5       	in	r24, 0x2f	; 47
 3b4:	80 61       	ori	r24, 0x10	; 16
 3b6:	8f bd       	out	0x2f, r24	; 47
	
	CLEAR_BIT(TCCR1A,3);//3
 3b8:	8f b5       	in	r24, 0x2f	; 47
 3ba:	87 7f       	andi	r24, 0xF7	; 247
 3bc:	8f bd       	out	0x2f, r24	; 47
	CLEAR_BIT(TCCR1A,2);//2
 3be:	8f b5       	in	r24, 0x2f	; 47
 3c0:	8b 7f       	andi	r24, 0xFB	; 251
 3c2:	8f bd       	out	0x2f, r24	; 47
	
	CLEAR_BIT(TCCR1A,1);//1
 3c4:	8f b5       	in	r24, 0x2f	; 47
 3c6:	8d 7f       	andi	r24, 0xFD	; 253
 3c8:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,0);//0
 3ca:	8f b5       	in	r24, 0x2f	; 47
 3cc:	81 60       	ori	r24, 0x01	; 1
 3ce:	8f bd       	out	0x2f, r24	; 47
	
	CLEAR_BIT(TCCR1B,4);
 3d0:	8e b5       	in	r24, 0x2e	; 46
 3d2:	8f 7e       	andi	r24, 0xEF	; 239
 3d4:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,3);
 3d6:	8e b5       	in	r24, 0x2e	; 46
 3d8:	88 60       	ori	r24, 0x08	; 8
 3da:	8e bd       	out	0x2e, r24	; 46
	
	
	SET_BIT(TCCR1B,0);
 3dc:	8e b5       	in	r24, 0x2e	; 46
 3de:	81 60       	ori	r24, 0x01	; 1
 3e0:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TCCR1B,1);
 3e2:	8e b5       	in	r24, 0x2e	; 46
 3e4:	8d 7f       	andi	r24, 0xFD	; 253
 3e6:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,2);
 3e8:	8e b5       	in	r24, 0x2e	; 46
 3ea:	84 60       	ori	r24, 0x04	; 4
 3ec:	8e bd       	out	0x2e, r24	; 46
	
	//timer 2
	CLEAR_BIT(TCCR2, 7);
 3ee:	85 b5       	in	r24, 0x25	; 37
 3f0:	8f 77       	andi	r24, 0x7F	; 127
 3f2:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2, 6);
 3f4:	85 b5       	in	r24, 0x25	; 37
 3f6:	80 64       	ori	r24, 0x40	; 64
 3f8:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2, 3);
 3fa:	85 b5       	in	r24, 0x25	; 37
 3fc:	88 60       	ori	r24, 0x08	; 8
 3fe:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,  5);
 400:	85 b5       	in	r24, 0x25	; 37
 402:	80 62       	ori	r24, 0x20	; 32
 404:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2, 4);
 406:	85 b5       	in	r24, 0x25	; 37
 408:	80 61       	ori	r24, 0x10	; 16
 40a:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2, 2);
 40c:	85 b5       	in	r24, 0x25	; 37
 40e:	84 60       	ori	r24, 0x04	; 4
 410:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2, 1);
 412:	85 b5       	in	r24, 0x25	; 37
 414:	82 60       	ori	r24, 0x02	; 2
 416:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2, 0);
 418:	85 b5       	in	r24, 0x25	; 37
 41a:	81 60       	ori	r24, 0x01	; 1
 41c:	85 bd       	out	0x25, r24	; 37
 41e:	08 95       	ret

00000420 <PWM_vidSetDutyNFreqCH0>:
	
}

void PWM_vidSetDutyNFreqCH0(f32 Copy_u8DutyCycle)
{
	TCNT0=0;
 420:	12 be       	out	0x32, r1	; 50
	f32 dutycycle=(Copy_u8DutyCycle/100)*256;
 422:	20 e0       	ldi	r18, 0x00	; 0
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	48 ec       	ldi	r20, 0xC8	; 200
 428:	52 e4       	ldi	r21, 0x42	; 66
 42a:	0e 94 92 02 	call	0x524	; 0x524 <__divsf3>
 42e:	20 e0       	ldi	r18, 0x00	; 0
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	40 e8       	ldi	r20, 0x80	; 128
 434:	53 e4       	ldi	r21, 0x43	; 67
 436:	0e 94 8b 03 	call	0x716	; 0x716 <__mulsf3>
	s8 cycle=(s8)dutycycle;
 43a:	0e 94 0b 03 	call	0x616	; 0x616 <__fixunssfsi>
	OCR0=256-cycle;
 43e:	61 95       	neg	r22
 440:	6c bf       	out	0x3c, r22	; 60
 442:	08 95       	ret

00000444 <PWM_vidSetDutyNFreqCH1A>:
}


void PWM_vidSetDutyNFreqCH1A(f32 Copy_u8DutyCycle)
{
	f32 dutycycle=(Copy_u8DutyCycle/100)*256;
 444:	20 e0       	ldi	r18, 0x00	; 0
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	48 ec       	ldi	r20, 0xC8	; 200
 44a:	52 e4       	ldi	r21, 0x42	; 66
 44c:	0e 94 92 02 	call	0x524	; 0x524 <__divsf3>
 450:	20 e0       	ldi	r18, 0x00	; 0
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	40 e8       	ldi	r20, 0x80	; 128
 456:	53 e4       	ldi	r21, 0x43	; 67
 458:	0e 94 8b 03 	call	0x716	; 0x716 <__mulsf3>
	s16 cycle=(s16)dutycycle;
 45c:	0e 94 04 03 	call	0x608	; 0x608 <__fixsfsi>
	OCR1A=(256-cycle);
 460:	20 e0       	ldi	r18, 0x00	; 0
 462:	31 e0       	ldi	r19, 0x01	; 1
 464:	c9 01       	movw	r24, r18
 466:	86 1b       	sub	r24, r22
 468:	97 0b       	sbc	r25, r23
 46a:	9b bd       	out	0x2b, r25	; 43
 46c:	8a bd       	out	0x2a, r24	; 42
 46e:	08 95       	ret

00000470 <PWM_vidSetDutyNFreqCH1B>:
}
void PWM_vidSetDutyNFreqCH1B(f32 Copy_u8DutyCycle)
{
	f32 dutycycle=(Copy_u8DutyCycle/100)*256;
 470:	20 e0       	ldi	r18, 0x00	; 0
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	48 ec       	ldi	r20, 0xC8	; 200
 476:	52 e4       	ldi	r21, 0x42	; 66
 478:	0e 94 92 02 	call	0x524	; 0x524 <__divsf3>
 47c:	20 e0       	ldi	r18, 0x00	; 0
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	40 e8       	ldi	r20, 0x80	; 128
 482:	53 e4       	ldi	r21, 0x43	; 67
 484:	0e 94 8b 03 	call	0x716	; 0x716 <__mulsf3>
	s16 cycle=(s16)dutycycle;
 488:	0e 94 04 03 	call	0x608	; 0x608 <__fixsfsi>
	OCR1B=(256-cycle);
 48c:	20 e0       	ldi	r18, 0x00	; 0
 48e:	31 e0       	ldi	r19, 0x01	; 1
 490:	c9 01       	movw	r24, r18
 492:	86 1b       	sub	r24, r22
 494:	97 0b       	sbc	r25, r23
 496:	99 bd       	out	0x29, r25	; 41
 498:	88 bd       	out	0x28, r24	; 40
 49a:	08 95       	ret

0000049c <PWM_vidSetDutyNFreqCH2>:
}

void PWM_vidSetDutyNFreqCH2(f32 Copy_u8DutyCycle){
	TCNT2=0;
 49c:	14 bc       	out	0x24, r1	; 36
	f32 dutycycle=(Copy_u8DutyCycle/100)*256;
 49e:	20 e0       	ldi	r18, 0x00	; 0
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	48 ec       	ldi	r20, 0xC8	; 200
 4a4:	52 e4       	ldi	r21, 0x42	; 66
 4a6:	0e 94 92 02 	call	0x524	; 0x524 <__divsf3>
 4aa:	20 e0       	ldi	r18, 0x00	; 0
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	40 e8       	ldi	r20, 0x80	; 128
 4b0:	53 e4       	ldi	r21, 0x43	; 67
 4b2:	0e 94 8b 03 	call	0x716	; 0x716 <__mulsf3>
	s8 cycle=(s8)dutycycle;
 4b6:	0e 94 0b 03 	call	0x616	; 0x616 <__fixunssfsi>
	OCR2=256-cycle;
 4ba:	61 95       	neg	r22
 4bc:	63 bd       	out	0x23, r22	; 35
 4be:	08 95       	ret

000004c0 <USART_Init>:
#include "USART_H.h"						/* Include USART header file */

void USART_Init(unsigned long BAUDRATE)				/* USART initialize function */
{
	UCSRB |= (1 << RXEN) | (1 << TXEN);				/* Enable USART transmitter and receiver */
 4c0:	2a b1       	in	r18, 0x0a	; 10
 4c2:	28 61       	ori	r18, 0x18	; 24
 4c4:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL)| (1 << UCSZ0) | (1 << UCSZ1);	/* Write USCRC for 8 bit data and 1 stop bit */
 4c6:	20 b5       	in	r18, 0x20	; 32
 4c8:	26 68       	ori	r18, 0x86	; 134
 4ca:	20 bd       	out	0x20, r18	; 32
	UBRRL = BAUD_PRESCALE;							/* Load UBRRL with lower 8 bit of prescale value */
 4cc:	dc 01       	movw	r26, r24
 4ce:	cb 01       	movw	r24, r22
 4d0:	88 0f       	add	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	aa 1f       	adc	r26, r26
 4d6:	bb 1f       	adc	r27, r27
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	aa 1f       	adc	r26, r26
 4de:	bb 1f       	adc	r27, r27
 4e0:	9c 01       	movw	r18, r24
 4e2:	ad 01       	movw	r20, r26
 4e4:	22 0f       	add	r18, r18
 4e6:	33 1f       	adc	r19, r19
 4e8:	44 1f       	adc	r20, r20
 4ea:	55 1f       	adc	r21, r21
 4ec:	22 0f       	add	r18, r18
 4ee:	33 1f       	adc	r19, r19
 4f0:	44 1f       	adc	r20, r20
 4f2:	55 1f       	adc	r21, r21
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	74 e2       	ldi	r23, 0x24	; 36
 4f8:	84 ef       	ldi	r24, 0xF4	; 244
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__udivmodsi4>
 500:	8f ef       	ldi	r24, 0xFF	; 255
 502:	82 0f       	add	r24, r18
 504:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);					/* Load UBRRH with upper 8 bit of prescale value */
 506:	da 01       	movw	r26, r20
 508:	c9 01       	movw	r24, r18
 50a:	01 97       	sbiw	r24, 0x01	; 1
 50c:	a1 09       	sbc	r26, r1
 50e:	b1 09       	sbc	r27, r1
 510:	89 2f       	mov	r24, r25
 512:	9a 2f       	mov	r25, r26
 514:	ab 2f       	mov	r26, r27
 516:	bb 27       	eor	r27, r27
 518:	80 bd       	out	0x20, r24	; 32
 51a:	08 95       	ret

0000051c <USART_RxChar>:
}

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
 51c:	5f 9b       	sbis	0x0b, 7	; 11
 51e:	fe cf       	rjmp	.-4      	; 0x51c <USART_RxChar>
	return(UDR);									/* Get and return received data */
 520:	8c b1       	in	r24, 0x0c	; 12
}
 522:	08 95       	ret

00000524 <__divsf3>:
 524:	0e 94 a6 02 	call	0x54c	; 0x54c <__divsf3x>
 528:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__fp_round>
 52c:	0e 94 4a 03 	call	0x694	; 0x694 <__fp_pscB>
 530:	58 f0       	brcs	.+22     	; 0x548 <__divsf3+0x24>
 532:	0e 94 43 03 	call	0x686	; 0x686 <__fp_pscA>
 536:	40 f0       	brcs	.+16     	; 0x548 <__divsf3+0x24>
 538:	29 f4       	brne	.+10     	; 0x544 <__divsf3+0x20>
 53a:	5f 3f       	cpi	r21, 0xFF	; 255
 53c:	29 f0       	breq	.+10     	; 0x548 <__divsf3+0x24>
 53e:	0c 94 3a 03 	jmp	0x674	; 0x674 <__fp_inf>
 542:	51 11       	cpse	r21, r1
 544:	0c 94 85 03 	jmp	0x70a	; 0x70a <__fp_szero>
 548:	0c 94 40 03 	jmp	0x680	; 0x680 <__fp_nan>

0000054c <__divsf3x>:
 54c:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fp_split3>
 550:	68 f3       	brcs	.-38     	; 0x52c <__divsf3+0x8>

00000552 <__divsf3_pse>:
 552:	99 23       	and	r25, r25
 554:	b1 f3       	breq	.-20     	; 0x542 <__divsf3+0x1e>
 556:	55 23       	and	r21, r21
 558:	91 f3       	breq	.-28     	; 0x53e <__divsf3+0x1a>
 55a:	95 1b       	sub	r25, r21
 55c:	55 0b       	sbc	r21, r21
 55e:	bb 27       	eor	r27, r27
 560:	aa 27       	eor	r26, r26
 562:	62 17       	cp	r22, r18
 564:	73 07       	cpc	r23, r19
 566:	84 07       	cpc	r24, r20
 568:	38 f0       	brcs	.+14     	; 0x578 <__divsf3_pse+0x26>
 56a:	9f 5f       	subi	r25, 0xFF	; 255
 56c:	5f 4f       	sbci	r21, 0xFF	; 255
 56e:	22 0f       	add	r18, r18
 570:	33 1f       	adc	r19, r19
 572:	44 1f       	adc	r20, r20
 574:	aa 1f       	adc	r26, r26
 576:	a9 f3       	breq	.-22     	; 0x562 <__divsf3_pse+0x10>
 578:	35 d0       	rcall	.+106    	; 0x5e4 <__divsf3_pse+0x92>
 57a:	0e 2e       	mov	r0, r30
 57c:	3a f0       	brmi	.+14     	; 0x58c <__divsf3_pse+0x3a>
 57e:	e0 e8       	ldi	r30, 0x80	; 128
 580:	32 d0       	rcall	.+100    	; 0x5e6 <__divsf3_pse+0x94>
 582:	91 50       	subi	r25, 0x01	; 1
 584:	50 40       	sbci	r21, 0x00	; 0
 586:	e6 95       	lsr	r30
 588:	00 1c       	adc	r0, r0
 58a:	ca f7       	brpl	.-14     	; 0x57e <__divsf3_pse+0x2c>
 58c:	2b d0       	rcall	.+86     	; 0x5e4 <__divsf3_pse+0x92>
 58e:	fe 2f       	mov	r31, r30
 590:	29 d0       	rcall	.+82     	; 0x5e4 <__divsf3_pse+0x92>
 592:	66 0f       	add	r22, r22
 594:	77 1f       	adc	r23, r23
 596:	88 1f       	adc	r24, r24
 598:	bb 1f       	adc	r27, r27
 59a:	26 17       	cp	r18, r22
 59c:	37 07       	cpc	r19, r23
 59e:	48 07       	cpc	r20, r24
 5a0:	ab 07       	cpc	r26, r27
 5a2:	b0 e8       	ldi	r27, 0x80	; 128
 5a4:	09 f0       	breq	.+2      	; 0x5a8 <__divsf3_pse+0x56>
 5a6:	bb 0b       	sbc	r27, r27
 5a8:	80 2d       	mov	r24, r0
 5aa:	bf 01       	movw	r22, r30
 5ac:	ff 27       	eor	r31, r31
 5ae:	93 58       	subi	r25, 0x83	; 131
 5b0:	5f 4f       	sbci	r21, 0xFF	; 255
 5b2:	3a f0       	brmi	.+14     	; 0x5c2 <__divsf3_pse+0x70>
 5b4:	9e 3f       	cpi	r25, 0xFE	; 254
 5b6:	51 05       	cpc	r21, r1
 5b8:	78 f0       	brcs	.+30     	; 0x5d8 <__divsf3_pse+0x86>
 5ba:	0c 94 3a 03 	jmp	0x674	; 0x674 <__fp_inf>
 5be:	0c 94 85 03 	jmp	0x70a	; 0x70a <__fp_szero>
 5c2:	5f 3f       	cpi	r21, 0xFF	; 255
 5c4:	e4 f3       	brlt	.-8      	; 0x5be <__divsf3_pse+0x6c>
 5c6:	98 3e       	cpi	r25, 0xE8	; 232
 5c8:	d4 f3       	brlt	.-12     	; 0x5be <__divsf3_pse+0x6c>
 5ca:	86 95       	lsr	r24
 5cc:	77 95       	ror	r23
 5ce:	67 95       	ror	r22
 5d0:	b7 95       	ror	r27
 5d2:	f7 95       	ror	r31
 5d4:	9f 5f       	subi	r25, 0xFF	; 255
 5d6:	c9 f7       	brne	.-14     	; 0x5ca <__divsf3_pse+0x78>
 5d8:	88 0f       	add	r24, r24
 5da:	91 1d       	adc	r25, r1
 5dc:	96 95       	lsr	r25
 5de:	87 95       	ror	r24
 5e0:	97 f9       	bld	r25, 7
 5e2:	08 95       	ret
 5e4:	e1 e0       	ldi	r30, 0x01	; 1
 5e6:	66 0f       	add	r22, r22
 5e8:	77 1f       	adc	r23, r23
 5ea:	88 1f       	adc	r24, r24
 5ec:	bb 1f       	adc	r27, r27
 5ee:	62 17       	cp	r22, r18
 5f0:	73 07       	cpc	r23, r19
 5f2:	84 07       	cpc	r24, r20
 5f4:	ba 07       	cpc	r27, r26
 5f6:	20 f0       	brcs	.+8      	; 0x600 <__divsf3_pse+0xae>
 5f8:	62 1b       	sub	r22, r18
 5fa:	73 0b       	sbc	r23, r19
 5fc:	84 0b       	sbc	r24, r20
 5fe:	ba 0b       	sbc	r27, r26
 600:	ee 1f       	adc	r30, r30
 602:	88 f7       	brcc	.-30     	; 0x5e6 <__divsf3_pse+0x94>
 604:	e0 95       	com	r30
 606:	08 95       	ret

00000608 <__fixsfsi>:
 608:	0e 94 0b 03 	call	0x616	; 0x616 <__fixunssfsi>
 60c:	68 94       	set
 60e:	b1 11       	cpse	r27, r1
 610:	0c 94 85 03 	jmp	0x70a	; 0x70a <__fp_szero>
 614:	08 95       	ret

00000616 <__fixunssfsi>:
 616:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__fp_splitA>
 61a:	88 f0       	brcs	.+34     	; 0x63e <__fixunssfsi+0x28>
 61c:	9f 57       	subi	r25, 0x7F	; 127
 61e:	98 f0       	brcs	.+38     	; 0x646 <__fixunssfsi+0x30>
 620:	b9 2f       	mov	r27, r25
 622:	99 27       	eor	r25, r25
 624:	b7 51       	subi	r27, 0x17	; 23
 626:	b0 f0       	brcs	.+44     	; 0x654 <__fixunssfsi+0x3e>
 628:	e1 f0       	breq	.+56     	; 0x662 <__fixunssfsi+0x4c>
 62a:	66 0f       	add	r22, r22
 62c:	77 1f       	adc	r23, r23
 62e:	88 1f       	adc	r24, r24
 630:	99 1f       	adc	r25, r25
 632:	1a f0       	brmi	.+6      	; 0x63a <__fixunssfsi+0x24>
 634:	ba 95       	dec	r27
 636:	c9 f7       	brne	.-14     	; 0x62a <__fixunssfsi+0x14>
 638:	14 c0       	rjmp	.+40     	; 0x662 <__fixunssfsi+0x4c>
 63a:	b1 30       	cpi	r27, 0x01	; 1
 63c:	91 f0       	breq	.+36     	; 0x662 <__fixunssfsi+0x4c>
 63e:	0e 94 84 03 	call	0x708	; 0x708 <__fp_zero>
 642:	b1 e0       	ldi	r27, 0x01	; 1
 644:	08 95       	ret
 646:	0c 94 84 03 	jmp	0x708	; 0x708 <__fp_zero>
 64a:	67 2f       	mov	r22, r23
 64c:	78 2f       	mov	r23, r24
 64e:	88 27       	eor	r24, r24
 650:	b8 5f       	subi	r27, 0xF8	; 248
 652:	39 f0       	breq	.+14     	; 0x662 <__fixunssfsi+0x4c>
 654:	b9 3f       	cpi	r27, 0xF9	; 249
 656:	cc f3       	brlt	.-14     	; 0x64a <__fixunssfsi+0x34>
 658:	86 95       	lsr	r24
 65a:	77 95       	ror	r23
 65c:	67 95       	ror	r22
 65e:	b3 95       	inc	r27
 660:	d9 f7       	brne	.-10     	; 0x658 <__fixunssfsi+0x42>
 662:	3e f4       	brtc	.+14     	; 0x672 <__fixunssfsi+0x5c>
 664:	90 95       	com	r25
 666:	80 95       	com	r24
 668:	70 95       	com	r23
 66a:	61 95       	neg	r22
 66c:	7f 4f       	sbci	r23, 0xFF	; 255
 66e:	8f 4f       	sbci	r24, 0xFF	; 255
 670:	9f 4f       	sbci	r25, 0xFF	; 255
 672:	08 95       	ret

00000674 <__fp_inf>:
 674:	97 f9       	bld	r25, 7
 676:	9f 67       	ori	r25, 0x7F	; 127
 678:	80 e8       	ldi	r24, 0x80	; 128
 67a:	70 e0       	ldi	r23, 0x00	; 0
 67c:	60 e0       	ldi	r22, 0x00	; 0
 67e:	08 95       	ret

00000680 <__fp_nan>:
 680:	9f ef       	ldi	r25, 0xFF	; 255
 682:	80 ec       	ldi	r24, 0xC0	; 192
 684:	08 95       	ret

00000686 <__fp_pscA>:
 686:	00 24       	eor	r0, r0
 688:	0a 94       	dec	r0
 68a:	16 16       	cp	r1, r22
 68c:	17 06       	cpc	r1, r23
 68e:	18 06       	cpc	r1, r24
 690:	09 06       	cpc	r0, r25
 692:	08 95       	ret

00000694 <__fp_pscB>:
 694:	00 24       	eor	r0, r0
 696:	0a 94       	dec	r0
 698:	12 16       	cp	r1, r18
 69a:	13 06       	cpc	r1, r19
 69c:	14 06       	cpc	r1, r20
 69e:	05 06       	cpc	r0, r21
 6a0:	08 95       	ret

000006a2 <__fp_round>:
 6a2:	09 2e       	mov	r0, r25
 6a4:	03 94       	inc	r0
 6a6:	00 0c       	add	r0, r0
 6a8:	11 f4       	brne	.+4      	; 0x6ae <__fp_round+0xc>
 6aa:	88 23       	and	r24, r24
 6ac:	52 f0       	brmi	.+20     	; 0x6c2 <__fp_round+0x20>
 6ae:	bb 0f       	add	r27, r27
 6b0:	40 f4       	brcc	.+16     	; 0x6c2 <__fp_round+0x20>
 6b2:	bf 2b       	or	r27, r31
 6b4:	11 f4       	brne	.+4      	; 0x6ba <__fp_round+0x18>
 6b6:	60 ff       	sbrs	r22, 0
 6b8:	04 c0       	rjmp	.+8      	; 0x6c2 <__fp_round+0x20>
 6ba:	6f 5f       	subi	r22, 0xFF	; 255
 6bc:	7f 4f       	sbci	r23, 0xFF	; 255
 6be:	8f 4f       	sbci	r24, 0xFF	; 255
 6c0:	9f 4f       	sbci	r25, 0xFF	; 255
 6c2:	08 95       	ret

000006c4 <__fp_split3>:
 6c4:	57 fd       	sbrc	r21, 7
 6c6:	90 58       	subi	r25, 0x80	; 128
 6c8:	44 0f       	add	r20, r20
 6ca:	55 1f       	adc	r21, r21
 6cc:	59 f0       	breq	.+22     	; 0x6e4 <__fp_splitA+0x10>
 6ce:	5f 3f       	cpi	r21, 0xFF	; 255
 6d0:	71 f0       	breq	.+28     	; 0x6ee <__fp_splitA+0x1a>
 6d2:	47 95       	ror	r20

000006d4 <__fp_splitA>:
 6d4:	88 0f       	add	r24, r24
 6d6:	97 fb       	bst	r25, 7
 6d8:	99 1f       	adc	r25, r25
 6da:	61 f0       	breq	.+24     	; 0x6f4 <__fp_splitA+0x20>
 6dc:	9f 3f       	cpi	r25, 0xFF	; 255
 6de:	79 f0       	breq	.+30     	; 0x6fe <__fp_splitA+0x2a>
 6e0:	87 95       	ror	r24
 6e2:	08 95       	ret
 6e4:	12 16       	cp	r1, r18
 6e6:	13 06       	cpc	r1, r19
 6e8:	14 06       	cpc	r1, r20
 6ea:	55 1f       	adc	r21, r21
 6ec:	f2 cf       	rjmp	.-28     	; 0x6d2 <__fp_split3+0xe>
 6ee:	46 95       	lsr	r20
 6f0:	f1 df       	rcall	.-30     	; 0x6d4 <__fp_splitA>
 6f2:	08 c0       	rjmp	.+16     	; 0x704 <__fp_splitA+0x30>
 6f4:	16 16       	cp	r1, r22
 6f6:	17 06       	cpc	r1, r23
 6f8:	18 06       	cpc	r1, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	f1 cf       	rjmp	.-30     	; 0x6e0 <__fp_splitA+0xc>
 6fe:	86 95       	lsr	r24
 700:	71 05       	cpc	r23, r1
 702:	61 05       	cpc	r22, r1
 704:	08 94       	sec
 706:	08 95       	ret

00000708 <__fp_zero>:
 708:	e8 94       	clt

0000070a <__fp_szero>:
 70a:	bb 27       	eor	r27, r27
 70c:	66 27       	eor	r22, r22
 70e:	77 27       	eor	r23, r23
 710:	cb 01       	movw	r24, r22
 712:	97 f9       	bld	r25, 7
 714:	08 95       	ret

00000716 <__mulsf3>:
 716:	0e 94 9e 03 	call	0x73c	; 0x73c <__mulsf3x>
 71a:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__fp_round>
 71e:	0e 94 43 03 	call	0x686	; 0x686 <__fp_pscA>
 722:	38 f0       	brcs	.+14     	; 0x732 <__mulsf3+0x1c>
 724:	0e 94 4a 03 	call	0x694	; 0x694 <__fp_pscB>
 728:	20 f0       	brcs	.+8      	; 0x732 <__mulsf3+0x1c>
 72a:	95 23       	and	r25, r21
 72c:	11 f0       	breq	.+4      	; 0x732 <__mulsf3+0x1c>
 72e:	0c 94 3a 03 	jmp	0x674	; 0x674 <__fp_inf>
 732:	0c 94 40 03 	jmp	0x680	; 0x680 <__fp_nan>
 736:	11 24       	eor	r1, r1
 738:	0c 94 85 03 	jmp	0x70a	; 0x70a <__fp_szero>

0000073c <__mulsf3x>:
 73c:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fp_split3>
 740:	70 f3       	brcs	.-36     	; 0x71e <__mulsf3+0x8>

00000742 <__mulsf3_pse>:
 742:	95 9f       	mul	r25, r21
 744:	c1 f3       	breq	.-16     	; 0x736 <__mulsf3+0x20>
 746:	95 0f       	add	r25, r21
 748:	50 e0       	ldi	r21, 0x00	; 0
 74a:	55 1f       	adc	r21, r21
 74c:	62 9f       	mul	r22, r18
 74e:	f0 01       	movw	r30, r0
 750:	72 9f       	mul	r23, r18
 752:	bb 27       	eor	r27, r27
 754:	f0 0d       	add	r31, r0
 756:	b1 1d       	adc	r27, r1
 758:	63 9f       	mul	r22, r19
 75a:	aa 27       	eor	r26, r26
 75c:	f0 0d       	add	r31, r0
 75e:	b1 1d       	adc	r27, r1
 760:	aa 1f       	adc	r26, r26
 762:	64 9f       	mul	r22, r20
 764:	66 27       	eor	r22, r22
 766:	b0 0d       	add	r27, r0
 768:	a1 1d       	adc	r26, r1
 76a:	66 1f       	adc	r22, r22
 76c:	82 9f       	mul	r24, r18
 76e:	22 27       	eor	r18, r18
 770:	b0 0d       	add	r27, r0
 772:	a1 1d       	adc	r26, r1
 774:	62 1f       	adc	r22, r18
 776:	73 9f       	mul	r23, r19
 778:	b0 0d       	add	r27, r0
 77a:	a1 1d       	adc	r26, r1
 77c:	62 1f       	adc	r22, r18
 77e:	83 9f       	mul	r24, r19
 780:	a0 0d       	add	r26, r0
 782:	61 1d       	adc	r22, r1
 784:	22 1f       	adc	r18, r18
 786:	74 9f       	mul	r23, r20
 788:	33 27       	eor	r19, r19
 78a:	a0 0d       	add	r26, r0
 78c:	61 1d       	adc	r22, r1
 78e:	23 1f       	adc	r18, r19
 790:	84 9f       	mul	r24, r20
 792:	60 0d       	add	r22, r0
 794:	21 1d       	adc	r18, r1
 796:	82 2f       	mov	r24, r18
 798:	76 2f       	mov	r23, r22
 79a:	6a 2f       	mov	r22, r26
 79c:	11 24       	eor	r1, r1
 79e:	9f 57       	subi	r25, 0x7F	; 127
 7a0:	50 40       	sbci	r21, 0x00	; 0
 7a2:	9a f0       	brmi	.+38     	; 0x7ca <__mulsf3_pse+0x88>
 7a4:	f1 f0       	breq	.+60     	; 0x7e2 <__mulsf3_pse+0xa0>
 7a6:	88 23       	and	r24, r24
 7a8:	4a f0       	brmi	.+18     	; 0x7bc <__mulsf3_pse+0x7a>
 7aa:	ee 0f       	add	r30, r30
 7ac:	ff 1f       	adc	r31, r31
 7ae:	bb 1f       	adc	r27, r27
 7b0:	66 1f       	adc	r22, r22
 7b2:	77 1f       	adc	r23, r23
 7b4:	88 1f       	adc	r24, r24
 7b6:	91 50       	subi	r25, 0x01	; 1
 7b8:	50 40       	sbci	r21, 0x00	; 0
 7ba:	a9 f7       	brne	.-22     	; 0x7a6 <__mulsf3_pse+0x64>
 7bc:	9e 3f       	cpi	r25, 0xFE	; 254
 7be:	51 05       	cpc	r21, r1
 7c0:	80 f0       	brcs	.+32     	; 0x7e2 <__mulsf3_pse+0xa0>
 7c2:	0c 94 3a 03 	jmp	0x674	; 0x674 <__fp_inf>
 7c6:	0c 94 85 03 	jmp	0x70a	; 0x70a <__fp_szero>
 7ca:	5f 3f       	cpi	r21, 0xFF	; 255
 7cc:	e4 f3       	brlt	.-8      	; 0x7c6 <__mulsf3_pse+0x84>
 7ce:	98 3e       	cpi	r25, 0xE8	; 232
 7d0:	d4 f3       	brlt	.-12     	; 0x7c6 <__mulsf3_pse+0x84>
 7d2:	86 95       	lsr	r24
 7d4:	77 95       	ror	r23
 7d6:	67 95       	ror	r22
 7d8:	b7 95       	ror	r27
 7da:	f7 95       	ror	r31
 7dc:	e7 95       	ror	r30
 7de:	9f 5f       	subi	r25, 0xFF	; 255
 7e0:	c1 f7       	brne	.-16     	; 0x7d2 <__mulsf3_pse+0x90>
 7e2:	fe 2b       	or	r31, r30
 7e4:	88 0f       	add	r24, r24
 7e6:	91 1d       	adc	r25, r1
 7e8:	96 95       	lsr	r25
 7ea:	87 95       	ror	r24
 7ec:	97 f9       	bld	r25, 7
 7ee:	08 95       	ret

000007f0 <__udivmodsi4>:
 7f0:	a1 e2       	ldi	r26, 0x21	; 33
 7f2:	1a 2e       	mov	r1, r26
 7f4:	aa 1b       	sub	r26, r26
 7f6:	bb 1b       	sub	r27, r27
 7f8:	fd 01       	movw	r30, r26
 7fa:	0d c0       	rjmp	.+26     	; 0x816 <__udivmodsi4_ep>

000007fc <__udivmodsi4_loop>:
 7fc:	aa 1f       	adc	r26, r26
 7fe:	bb 1f       	adc	r27, r27
 800:	ee 1f       	adc	r30, r30
 802:	ff 1f       	adc	r31, r31
 804:	a2 17       	cp	r26, r18
 806:	b3 07       	cpc	r27, r19
 808:	e4 07       	cpc	r30, r20
 80a:	f5 07       	cpc	r31, r21
 80c:	20 f0       	brcs	.+8      	; 0x816 <__udivmodsi4_ep>
 80e:	a2 1b       	sub	r26, r18
 810:	b3 0b       	sbc	r27, r19
 812:	e4 0b       	sbc	r30, r20
 814:	f5 0b       	sbc	r31, r21

00000816 <__udivmodsi4_ep>:
 816:	66 1f       	adc	r22, r22
 818:	77 1f       	adc	r23, r23
 81a:	88 1f       	adc	r24, r24
 81c:	99 1f       	adc	r25, r25
 81e:	1a 94       	dec	r1
 820:	69 f7       	brne	.-38     	; 0x7fc <__udivmodsi4_loop>
 822:	60 95       	com	r22
 824:	70 95       	com	r23
 826:	80 95       	com	r24
 828:	90 95       	com	r25
 82a:	9b 01       	movw	r18, r22
 82c:	ac 01       	movw	r20, r24
 82e:	bd 01       	movw	r22, r26
 830:	cf 01       	movw	r24, r30
 832:	08 95       	ret

00000834 <_exit>:
 834:	f8 94       	cli

00000836 <__stop_program>:
 836:	ff cf       	rjmp	.-2      	; 0x836 <__stop_program>
